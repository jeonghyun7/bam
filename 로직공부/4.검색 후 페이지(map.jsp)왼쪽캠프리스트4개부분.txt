############################검색후 페이지(map.jsp)###############################
############################################################################
0. index.jsp - > SearchController.java
메인페이지에서 검색버튼을 눌렀을 때 index.jsp에서 action="search/search.bam"에 의하여 
SearchController.java의 @GetMapping("search.bam") 맵핑값이 가르키는 
private ModelAndView search() { 메서드가 실행되면서 디테일 페이지가 시작된다.

1.SearchController.java
의 private ModelAndView search() { 메서드에서
일단 new 예약어로 ModelAndView 객체를 생성하면서 String값으로 "client/result/map" 뷰이름
설정하여 ModelAndView 객체 response에 담아준다.
그다음
session.setAttribute("cp", 1); ->세션에 name은 "cp" / value는 1을 넣어 값을 저장해준다.
그다음
try{ 구문으로 들어와서 SearchResultVo result = searchService.searchCampList(~에 의해서
SearchServiceImpl.java로 이동하여

2.SearchServiceImpl.java
public Optional<SearchResultVo> searchCampList(구문 안으로 들어오게 된다.

######여기서잠깐 상식!##########
Optional<T> 클래스는 null이 올 수 있는 값을 감싸는 Wrapper클래스로, 참조하더라도 NPE(null point error)
가 발생하지 않도록 도와준다. (우리껄 통해 이해하자면 캠프리스트가 없을 수도 있으니까!? 사용한 클래스임)
################
이어서 
SearchResultVo sv = null;
Optional<SearchResultVo> maybeSV = Optional.ofNullable(sv); 
//null인지 아닌지 확신할 수 없는 객체를 담고 있는 Optional객체를 생성하는데 실제로도 sv변수에는 null값을 일단 담았다.

String cpStr = Integer.toString((Integer)session.getAttribute("cp"))
세션에서 cp속성을 얻어와서 String형 cpStr에 담아준다.

그리고 밑의 if문 if(isMore == false) {을 실행하는데 SearchController.java의 search()메서드에서 isMore값을 false로 받아왔기에
if 문이 실행되어 세션에서 cp데이터를 삭제한다.

페이지 유틸객체를 생성한다.
int currentPage = pageUtil.getCurrentPageSession(cpStr, session); 구문에 의해 PageUtil.java로 이동

3.PageUtil.java
public int getCurrentPageSession(String cpStr, HttpSession session)의 else문이 실행된다. 
cpStr에는 cp가 담겨있기 때문에!
구문들이 모두 실행 되며 currentPage를 반환하는데 1이 담겨있는것으로 생각되어진다.

4. SearchServiceImpl.java로 돌아와서 int currentPage 에는 1이 담기게 되고
int pageSize = pageUtil.getPageSize("4", session); // 뜨는 캠핑장 갯수 : 4 에는 4가 담기게 된다.

그다음 밑의 해쉬맵형태의 쿼리문을 query에 담고 searchMapper.selectSearchedListOfcamp로 이동
SearchMapper.java에 잠시 들렀다가 해당하는 mapper.xml인 searchMapper.xml로 이동한다.

SQL문이 실행되어 CampAndImg.java와 같은 컬럼들을 반환한다.(반환형태가 CampAndImg이기 때문)

반환된 값들을 list에 담고 그 아래에 for문을 통해 list의 값들을 1개씩 camp에 담으며 반복문이 실행된다.
dateUtil.getAllDatesInRange(checkIn, checkOut); 구문에 의해서

-> DateUtil.java로 이동.
5. DateUtil.java에서 예약시작날짜와 끝날짜를 / 형태에서 -형태로 바꾸어 저장해서 반환(?)하는 부분이며
Calendar startCal = Calendar.getInstance(); 구문은 캘린더에 위의 날짜들을 표시하기 위해 셋팅해주는부분

6.SearchService로 다시 이동하여. 시작끝날짜를 통하여 dateRange변수에날짜 범위를 저장하고
범위날짜를 date에 넣으며 for문을 돌면서 searchMapper.selectCheckBookingAvailable(query);를 찾아간다.

SearchMapper.xml까지 이동하여 
select ifnull(count(*),0) from BOOKING where CAMP_IDX = #{camp_idx}
		and CHECK_IN <= #{date} and CHECK_OUT >= #{date} and USING_STATE not in ('T')

SQL문을 해석하면 쿼리문에 들어간 날짜와 캠프idx를 통하여 해당날짜의 USING_STATE(예약상태)가 T가 아닌
갯수를 세고 그 개수가 null값이면 0을 치환하고 null값이 아니면 갯수를 보내줍니다.
- 즉, SQL문을 통하여 현재 예약된 갯수를 뽑아준다고 생각하기!

-> SearchServiceImpl.로 돌아와서 예약된 갯수가 > 해당캠핑장의 전체site갯수 를 비교해서

전체예약가능 개수보다 예약된 개수가 같거나 많으면 예약가능 캠핑장에서 제외를 시키고
그밑의 쿼리문 2개를 통하여 제외된 캠핑장을 빼고 갯수를 파악하는 SQL문과 그 최종 리스트를 뽑아주는 SQL문을
통하여 뽑고 return 한다. 

리턴된 값들은 다시 SearchController.java에 반환해주고 그값들을 품고 페이지에 표시된다!!










