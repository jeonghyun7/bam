camp_detail > 
<input type="hidden" id="initMember" value="${member.email}">
id="emptyHeart-${camp.camp_idx} onclick="fillHeart(this)"

heart.js > 
1.
function fillHeart(e)
const buttonId = e.getAttribute('id');
	const strList = buttonId.split('-');
	const camp_idx = strList[1];
	const email = document.getElementById("initMember").value;

id (emptyHeart-${camp.camp_idx})저장, 
id를 -로 구분 하여 [1]에 저장, 
value="${member.email}" 저장

2.
이메일이 없다면 문구 출력 후 
페이지로 이동시켜주는 location.href="../login/login.bam"; 로 인해 해당 경로로 이동
false 출력("", null, 0)

3.
const xhttp = new XMLHttpRequest();
xnmlHttpRequest 객체 생성(웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다)

4.
function loader2()
try
if(xhttp.readyState === XMLHttpRequest.DONE)
객체의 상태, DONE(4)요청한 데이터의 처리가 완료되어 응답할 준비 완료

if(status === 200)
서버의 처리가 성공적일 때 처리되는 콜백함수(200 서버에 문서 존재, 404 서버에 문서가 없음)

let result = xhttp.responseText;
응답으로 받은 데이터를 문자여롤 반환, null을 반환한다

if (result*1!==0)
이미 값이 있다면 

e.nextElementSibling.style.display = "inline";
다음요소를 선택한다

아니라면 문구 출력

catch
alert('Caught Exception: ' + exception.description);
예외 문구 출력

=> 
요청한 데이터의 처리가 완료되고 처리가 성공적으로 끝나고
문자열 데이터의 여부를 확인하여 
e.nextElementSibling.style.display = "inline"; 혹은
alert('Caught Exception: ' + exception.description);
실행

5.
xhttp.onreadystatechange = loader2;
데이터 여부 확인 및 문구 출력 함수 호출

6.
xhttp.open('GET', '../heart/insert.bam?email='+email+'&camp_idx='+camp_idx, true); 
xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');
xhttp.send();
XMLHttpRequest 사용 방법
사전에 open을 호출하고 이후에는 send()를 사용해야 된다.(형식)

7.
xhttp.open('GET', '../heart/insert.bam?email='+email+'&camp_idx='+camp_idx, true); 

HeartController > 
@RequestMapping("heart")  1차 매핑
@RequestMapping("insert.bam")
private void insert()
if(heartService.selectOwnHeartS(email, camp_idx)*1==1)

8.
HeartServiceImpl > 
public int selectOwnHeartS(String email, int camp_idx)
HashMap<String, Object> query = new HashMap<String, Object>();
HashMap-key value로 저장, 매우빠른 검색 속도로 대용량 데이터 관리에 유용, 키-값 쌍의 개수에 따라 동적으로 크기가 증가한다.

query.put("email", email);
query.put("camp_idx", camp_idx);
매개 변수 값을 hashmap 형태로 query에 저장

9.
HeartServiceImpl > 
Heart heart = mapper.selectOwnHeart(query);

10.
HeartMapper > 
Heart selectOwnHeart(HashMap<String, Object> query);

11.
HeartMapper.xml > 
<select id="selectOwnHeart" parameterType="hashmap" resultType="Heart">
    select * from HEART where CAMP_IDX=#{camp_idx} and EMAIL=#{email}
</select>

12.
HeartMapper > 
HeartServiceImpl > 
Heart heart = mapper.selectOwnHeart(query);
해당 회원의 캠핑장 찜 수 검색이 저장됨

13.
HeartServiceImpl > 
try{
			Heart heart = mapper.selectOwnHeart(query);
			if(heart==null) return 1;
		}catch(Exception e){
			return 0;
		}
		return 0;
해당 회원의 캠핑장 찜 수가 없다면 1, 있으면 0 출력

14.
HeartController > 
if(heartService.selectOwnHeartS(email, camp_idx)*1==1)
해당 회원의 캠핑장 찜 수가 없다면
flag = heartService.insertHeartS(email, camp_idx); 실행

15.
HeartServiceImpl > 
public int insertHeartS(String email, int camp_idx) 
매개 변수를 key-value로 저장

16.
HeartServiceImpl > 
try{
			mapper.insertHeart(query);
			return 1;
		}catch(Exception e){
			return 0;
		}
		
17.
HeartMapper > 
void insertHeart(HashMap<String, Object> query);

HeartMapper.xml >
<insert id="insertHeart" parameterType="hashmap">
		<!-- insert into HEART values(HEART_SEQ.nextval, #{email}, #{camp_idx}) -->
		insert into HEART values(nextval(HEART_SEQ), #{email}, #{camp_idx})
	</insert>
	<!-- 캠핑장 찜하기 액션-->

HeartMapper > 
void insertHeart(HashMap<String, Object> query);

18.
HeartServiceImpl > 
mapper.insertHeart(query); 
<!-- 캠핑장 찜하기 액션--> 이면 1 리턴, 
에러 발생기 0 리턴

19.
HeartController > 
flag = heartService.insertHeartS(email, camp_idx);
캠핑장 찜하기 액션 쿼리 및 리턴값 1(성공)을 포함함 그래서 int형

20.
HeartController > 
httpServletResponse.getWriter().println(flag);
(리턴값 1을)request 객체를 보낸 곳으로 데이터를 전달. 

httpServletResponse.flushBuffer();
버퍼에 있는 내용을 클라이언트에 전송

21.
HeartController > 
해당 회원의 캠핑장 찜 수가 있으면
리턴값 1을 request 객체를 보낸 곳으로 전달, 버퍼에 있는 내용 클라이언트에 전송

22.
heart js > 
../heart/insert.bam
해당 회원의 캠핑장에 대한 찜 여부 및 캠핑장 찜 액션의 여부를 알 수 있다

================================================================================================================================================================================================
1.
camp_detail.jsp >
id="heart-${camp.camp_idx}" onclick="emptyHeart(this)"

2.
heart js > 
function emptyHeart(e) 
const strList = e.getAttribute('id').split('-');
const camp_idx = strList[1];
const email = document.getElementById("initMember").value;

email이 없다면 로그인 페이지로 이동 ,문구 출력
location.href = "../login/login.bam";

3.
heart js > 
heart-${camp.camp_idx} 를 -로 구분
camp.camp_idx를 [1] 번째 요소에 저장

camp_detail.jsp >
id="initMember" value="${member.email}"의 
value를 저장한다.

4.
heart js > 
xhttp.onreadystatechange = loader

function loader()
요청한 데이터의 처리가 완료되고 처리가 성공적으로 끝나고
문자열 데이터의 여부를 확인하여 
e.nextElementSibling.style.display = "inline"; 혹은
alert('Caught Exception: ' + exception.description);
실행

5.
xhttp.open('GET', '../heart/delete.bam?email=' + email + '&camp_idx=' + camp_idx, true);
get방식 / 해당 경로 / email, capm_idx 전달

6.
heartcontroller > 
@RequestMapping("heart")
@RequestMapping("delete.bam")
private void delete(String email, Integer camp_idx, HttpServletResponse httpServletResponse)

7.
heartcontroller > 
if(heartService.selectOwnHeartS(email, camp_idx)*1==1)
해당 회원의 캠핑장 찜 수가 있다면
리턴값 1을 request 객체를 보낸 곳으로 전달, 버퍼에 있는 내용 클라이언트에 전송

8.
heartcontroller > 
해당 회원의 캠핑장 찜 수가 없다면
리턴값 1을 request 객체를 보낸 곳으로 전달, 버퍼에 있는 내용 클라이언트에 전송

flag = heartService.deleteHeartS(email, camp_idx);

9.
HeartServiceImpl > 
public int deleteHeartS(String email, int camp_idx)
매개변수를 key-value 형태로 저장

mapper.deleteHeart(query);

10.
HeartMapper > 
void deleteHeart(HashMap<String, Object> query);

HeartMapper.xml > 
<delete id="deleteHeart" parameterType="hashmap">
		delete from HEART where EMAIL=#{email} and CAMP_IDX=#{camp_idx}
</delete>

HeartMapper > 
void deleteHeart(HashMap<String, Object> query);

11.
HeartServiceImpl > 
mapper.deleteHeart(query);
<!-- 캠프장 찜하기 취소 액션-->

호출 후에 1을 반환한다 

예외면 0을 반환한다.

12.
HeartController > 
flag = heartService.deleteHeartS(email, camp_idx);
찜 하기 취소 액션이 실행되면 1을 , 하지 않으면 0을 반환한다
이를 flag에 저장한다

13.
heart.js > 
xhttp.open('GET', '../heart/delete.bam?email=' + email + '&camp_idx=' + camp_idx, true); 
xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8'); 
xhttp.send();

XMLHttpRequest 사용 방법
사전에 open을 호출하고 이후에는 send()를 사용해야 된다.(형식)











			













