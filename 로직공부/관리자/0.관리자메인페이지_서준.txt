############################################################################
관리자메인페이지(admin_main)

(1)admin_main.jsp(뷰페이지)의
<script src="/admin/js/admin-main.js"></script> 스크립트에의해 

(2)admin_main.js에서
$(document).ready(function() 에 의해 제이쿼리안의 함수가 실행

getCharts(true),getTotalValues(true),getLoginMembers(false) 실행 

getChart 함수 찾아 실행. 
함수 그 안에 getLineChartValues(false)함수를 따라가면 

function getLineChartValues(isAsync) 함수 실행----(ajax구문)

today_sales 를 url로 보내주고 type은 post방식이다. (today_sales로직을 따라 들어가면)

======================================================================

(3)AdminController.java

@postmapping("today_sales")  매핑값을 받고 private ChartVo getTodayAndYesterdaySales() 메소드 실행

메소드 안의 값을 가져오기 위해 adminService.getTodayAndYesterdaySalesService() 실행

===============================================
(4) AdminServiceImpl.java -> <- AdminMapper.xml (주고 받음)

@Override
	public ChartVo getTodayAndYesterdaySalesService() {

DateUtil dutil = new DateUtil()---이건 현재시간을 입력받는 구문("yyyy-MM-dd")이런 형식

long todaySales = adminMapper.selectSumTotalFeeOnDate(dutil.getToday())
(select ifnull(sum(TOTAL_FEE), 0) from BOOKING where date_format(BDATE, '%Y-%m-%d') = #{date})---반환타입 long타입 
 #SQL문을 통해서 오늘 전체매출금액을 뽑아온다.

long yesterdaySales = adminMapper.selectSumTotalFeeOnDate(dutil.getYesterday())
(select ifnull(sum(TOTAL_FEE), 0) from BOOKING where date_format(BDATE, '%Y-%m-%d') = #{date})---반환타입 long타입 
#SQL문을 통해서 어제 전체매출금액을 뽑아온다.

return 값으로 chartvo(todaySales,yesterdaySales)를 반환해준다.
오늘 매출액과, 어제 매출액을 가진 ChartVo형을 선언하여 반환(컨트롤러로 다시 이동~)
---------------------------------------------------------------------------
---------------------------------------------------------------------------
(5) AdminController.java
@PostMapping("today_sales")
ChartVo response = 반환받아온 ChartVO형을 다시 변수 response에 담아줌.
그 response값을 반환 -> 맵핑했던  admin_main.js의 아작스로 반환
------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
(6) admin-main.js
function getLineChartValues(isAsync) 함수----ajax구문
의 success: function(responseData){
 즉, ajax통신이 잘 이루어졌다면 컨트롤러에서 반환해준 reponse값을 responseData에 넣고 성공했을때 구문이 실행된다.

아작스 성공구문을 통해 
todaySales -> 오늘매출
yesterdatySales->어제매출
totalSales -> 전체합계매출 값의 변수를 다시 설정해주고
if문과 else if else문을 통해
increment값 증가값 , decrement값 감소 값을 변수값에 넣어 설정한다.

그리고 아래 if문은 아작스통신이 성공했을때 isChanged값을 true로 변경 하였기때문에
실행되며
if(isChanged){document.getElementById('line-update-date').innerText = getCurrentDate();
현재의 날짜를 함수를 통해 받아오고 .innerText구문을 통해 뷰의 아이디값이 
line-update-date인 부분에 날짜를 표시해준다.

function getLineChartValues(isAsync) 함수를 호출했던 곳으로 돌아간다.

#function getCharts(isAnimated){
	getLineChartValues(false);
구문으로 돌아와서 아래 구문을 다시 실행한다.
겟차트 함수를 호출한곳에서 isAnimated에 true값을 넣어주어 가지고 왔기 때문에
if문 실행하여 animationTime을 3000으로 설정해주고 
컬럼 변수에 비교, 어제 , 오늘 설정해준뒤에
lineData변수에 그래프관련 data값을 넣어주어 datasets데이터를 세팅한다.(바로 위구문들에서 설정해주었음)

ctx1변수에는 <canvas id="lineChart"></canvas> 뷰의 id값을 이용하여 .getContext('2d'); 차트를 그려주는 세팅
lineChart = new Chart(ctx1, { 안의 구문을 통하여
lineData변수에 저장된 data값들을 이용하여 bar 차트를 그려준다.
----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
그다음구문에서는 
getPieChartValues 관련 구문이 있는데 이것또한 위의 로직들처럼 일단 해당함수를 찾아갑니다.
->function getPieChartValues(isAsync){
	$.ajax({ 아작스통신 url맵핑한 곳으로 이동
		url: "total_member", 
-> #AdminController.java
@ResponseBody
	@PostMapping("total_member")
	private TotalResultVo getTotalMember() {
		TotalResultVo response = adminService.getTotalMemberService();
-> #AdminServiceImpl.java -> <- -> #AdminMapper.xml(매퍼와 주고받음)
@Override
	public TotalResultVo getTotalMemberService() {	
		Integer totalMember = adminMapper.selectCountMember();
		Integer totalLeaveMember = adminMapper.selectCountLeaveMember();
		return new TotalResultVo(totalMember, totalLeaveMember);
	}
1 SQL문은 전체 멤버 인원수를 뽑아서 반환하여 totalMember변수 저장
2 SQL문은 탈퇴 멤버 인원수를 뽑아서 반환하여 totalLeaveMember 변수 저장

TotalResultVo형으로 반환~
-> #AdminController.java
반환 받은 값을 TotalResultVo response =에 저장하고
그값을 다시 반환~

-> admin-main.js 의 function getPieChartValues(isAsync){
	$.ajax({
		url: "total_member",  아작스 구문의 

success: function(responseData){ 성공 구문에 반환된 값을 넣고 구문 을 실행합니다~
성공 구문에서는 받아온 값을 바탕으로
totalMember 변수와 totalLeaveMember 변수를 다시 설정해주고

그아래 if문은 동일하게 현재의 시간값을 받아서 id값이 pie-update-date인곳에 현재시간 설정해준뒤에

지금 현재 함수를 호출했던 구문으로 다시 되돌아갑니다~
function getCharts(isAnimated){ 의 중간부분쯤에 호출했던 곳으로 다시 되돌아오고 

let pieData = [totalMember, totalLeaveMember]; 새롭게 설정된 변수값을 파이데이터변수에 담아주고

아래 구문들을 통해 파이형태의 그래프를 그려줍니다. (세팅된 pieData에 담긴값들을 활용하여)
let ctx2 = document.getElementById("pieChart").getContext('2d');
	pieChart = new Chart(ctx2, {

------------------------------------------------------------------------------------------------------------------
여기까지가 뷰가 준비되었을때 실행되는 $(document).ready(function(){ 중 
	getCharts(true); 하나에 대한 부분이며
뷰로 설명하자면 하단왼쪽의 매출액비교그래프와 / 회원의 파이형태 그래프에 대한 로직입니다.

추가로 
getTotalValues(true) -> 함수 로직을 통해서는 뷰 상단의 예약수 / 캠핑장 수 /현재 로그인수 / 문의수가 뽑아져나오고
getLoginMembers(false) -> 함수 로직을 통해서는 뷰의 오른편에 위치하는 로그인 회원정보가 뽑아져 나올 것입니다.
------------------------------------------------------------------------------------------------------------------
###################################################################################
####################################################################################
###################################################################################
===========================================================================================================

js에서 getLoginMembers실행  ajax를 통해 url="login_members" post방식으로 보낸다. 


그럼 Controller에서 @postMapping("login_members") 받고 getLoginMembers()메소드 실행
return 값으로 getLoginMembersService()를 준다 

==============================================================
adminServiceImpl.java

getLoginMembersService메소드 실행 (대충 로그인 시간을 입력받는다?? 그래야 현재 로그인수 표시되니까)

return 값으로 loginList 안에 담긴 로그인 시간을 보내준다.  

Controller에서 return 값을 다시 ajax로 보내주고 

js ajax실행 성공시 success구문 실행--responseData값이 null값이 아니면 for문으로 responseData.length를 반복시키고 그 값을 login-member에 입력한다. 



===============================================================

admin-main.js

main메이지가 로드될때 .ready()로 getTotalValues()함수 실행 

ajax를 통해 url=main.json이고 method-GET방식으로 보낸다. 


================================================================


adminController.java

@RequestMapping("main.json") 에 의해 getTotalValues()메소드 실행

return 값에의해 getTotalValuesService()에 adminServiceImpl.java로 이동


================================================================
adminServiceImpl.java

getTotalValuesService()메소드 실행 
totalLoginMember 변수 초기화 해주고 
if(LoginStorage.getInstance().getLoginUsers() != null) {totalLoginMember =LoginStorage.getInstance().getLoginUsers().size();} 를 통해 값들을 넣어주고

쿼리구문을 통해 
adminMapper.selectCountCamp 값을 totalCamp에 넣어주고
adminMapper.selectCountBooking 값을 totalBooking에 넣어주고
adminMapper.selectCountInquiry값을 totalInquiry에 넣어주고
adminMapper.selectCountCurrentBooking값을 totalCurrentBooking넣어주고
adminMapper.selectCountInquiryUnchecked값을 totalUncheckedInquiry넣어주고

return 값으로 new totalResultVo(저장된 값들을 리턴해준다.)

그값을 컨트롤러에 가져와 ajax가서 success 로 들어간다.

text형식으로 저장된 responseData.totalbooking
responseData.totalCurrentBooking
responseData.totalCamp
responseData.totalLoginMember
responseData.totalInquiry
responseData.totalUncheckedInquiry
를 표시해준다.!~!!!!!!!!!!!! 잘못된거 있으면 후다닥 말해주세요
