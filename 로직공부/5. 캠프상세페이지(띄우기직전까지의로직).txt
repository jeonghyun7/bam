#상세페이지#(camp_detail.jsp)# 2페이지(메인인덱스페이지와 검색된 map.jsp)에서 타고 들어갈수 있습니다.

index.jsp에서 호출시 <a href="camp/camp_detail.bam?camp_idx=${unit.camp_idx}"

map.jsp에서 호출시 
function clickCamp(camp_idx, checkIn, checkOut, peopleNum, thumb){
	localStorage.setItem('thumb', thumb);
	location.href="../camp/camp_detail.bam?camp_idx="+camp_idx+"&checkIn="+checkIn+"&checkOut="+checkOut+"&peopleNum="+peopleNum;
	}


1.CampDetailController.java
맵핑되어진 campDetail 메서드가 실행되는데 
index.jsp에서 호출시에는 idx를 제외한 나머지가 null값이 들어오기 때문에
if문안으로 들어와서 idx를 제외한 나머지 값들을 세팅해줍니다. ( 체크인날짜 / 체크아웃날짜 / 인원수) 
그이후에 모델앤드뷰 객체의 페이지이동값인 뷰네임에 기본세팅한 값들을 포함한 리다이렉트주소를 저장하여
반환합니다. 

map.jsp에서 호출시와 index.jsp호출이후 리다이렉트 되었을 경우에는 if문을 지나치고 아래 구문들이 실행됩니다.

(1)mv = cdService.campDetail(Integer.parseInt(camp_idx));
-> CampDetailServiceImpl.java로 camp_idx값을 int형으로 바꾸어 가지고 이동

2. CampDetailServiceImpl.java

@Override
public ModelAndView campDetail(int camp_idx) { 
	Camp camp =mapper.selectCampInfo(camp_idx); 
해당 구문으로 인하여 CampDetailMapper.java에 들렀다가~CampDetail.Mapper.xml로 이동

3. CampDetail.Mapper.xml
에서 <select id="selectCampInfo" parameterType="int" resultType="Camp">
		select * from CAMP where CAMP_IDX=#{camp_idx}
	</select> 
SQL문을 통하여 가져온camp_idx와 일치하는 캠프의 모든 컬럼을 가지고 
즉, model의 Camp.java 형태(참조)를 가지고
반환합니다. 

4. CampDetailServiceImpl.java
반환된 캠프의 정보는 2.의 CampDetailServiceImpl.java의 campDetail메서드안의
Camp camp변수에 저장된다.

String conv = camp.getConv();
String secConv = camp.getSec_conv();
String etxConv = camp.getEtc_conv();

위구문을통하여 알 수 있는 사실중 하나는 우린 lombok을 사용하기때문에 
Camp.java에서 get,set이 @AllArgsConstructor에의해 정의되어 있어서
get set을 사용할수있다.

conv / secconv / etxconv 에 각각 값이 담겨있으면 값 간에 , 를 찍어주고 그값들을 다시 allConvlist에 추가한다.

만약 allConvlist에 아무것도 담기지 않으면 갖춰진 시설없음 을 담는다.

이어서 List<Img> ImgDetailList = mapper.selectDetailImg(camp_idx);
구문에 의해서 다시 CampDetailMapper.java에 들렀다가~CampDetail.Mapper.xml로 이동

5. CampDetail.Mapper.xml
에서 <!-- 캠핑장 상세사진 띄우기-->
	<select id="selectDetailImg" parameterType="int" resultType="Img">
		select * from IMG where CAMP_IDX=#{camp_idx} and DIVISION='detail' 
	</select>
SQL문을 통하여 가져온 camp_idx와 일치하는 DIVISION이 detail인 모든 이미지를 가지고
즉, model의 Img.java 형태(참조)를 가지고
반환합니다.
---------------------
6. CampDetailServiceImpl.java
에서 List<Img> ImgDetailList 에 해당하는 idx값의 모든 detail이미지를 담습니다.

String campName 에는 get으로 해당캠프 이름을 저장.

ModelAndView객체를 생성하며 페이지이동 맵핑에 해당 캠프이름을 같이 줍니다.
-> 이부분으로 인하여 우리가 원하는 캠핑장을 클릭하여 들어갔을 때 페이지 타이틀이
 청포대면 불밤야밤 :: 청포대숲속야영장으로 되는 것임.

이어서 List<String> sortNameList = mapper.selectSortName(camp_idx);
에 의하여 다시 CampDetailMapper.java에 들렀다가~CampDetail.Mapper.xml로 이동

7. CampDetail.Mapper.xml
에서 <!-- 각 캠핑장별 분류 이름 검색(ex, 글램핑, 카라반 ...) -->
	<select id="selectSortName" parameterType="int" resultType="String">
		select SORT_NAME from SORT where CAMP_IDX=#{camp_idx} group by SORT_NAME
	</select>

해당 SQL문을 통하여 SORT 테이블에서 가져온 camp_idx와 일치하는 sort_name을 모두 String타입으로가져갑니다.
(그룹바이 sort_name을 하였기때문에 중복된 값이 걸러지고 ex) 오토캠핑, 카라반 이처럼 하나씩의 sortname이
가져가집니다.)

8. CampDetailServiceImpl.java
에서 List<String> sortNameList에는 sortName 들이 담깁니다. ex) 오토캠핑, 카라반 ,,,, 등

이후 
for(int i=0; i<sortNameList.size(); i++) {

			list.add(selectSortS(camp_idx, sortNameList.get(i)));
for 구문을 도는데 list.add 그안의 selectSortS(camp_idx, sortNameList.get(i)));메서드 부터 찾아들어갑니다.

해당메서드는 campDetail메서드 바로 윗부분에 있습니다.

private List<Sort> selectSortS(int camp_idx, String sort_name){
		HashMap<String, Object> query= new HashMap<String,Object>();
		query.put("camp_idx", camp_idx);
		query.put("sort_name", sort_name);

		return mapper.selectSort(query);
	}
이 메서드에 ex) camp_idx와 오토캠핑이란 글자가 들어왔다고 가정하고 그값을 가지고
return 값의 mapper.selectSort(query) 을 찾아갑니다.

9. CampDetail.Mapper.xml
에서 !-- 각 캠핑장별 분류 전체 검색 -->
	<select id="selectSort" parameterType="hashmap" resultType="Sort">
		select * from SORT where CAMP_IDX=#{camp_idx} and SORT_NAME=#{sort_name}
	</select>
이 SQL문이 실행되는데 가져온 idx와 ex)오토캠핑 sortname이 동일한 값을 모두 sort형 타입으로 가져갑니다. 
즉, model의 Sort.java(참조하기) 형태를 가지고 반환.

10. CampDetailServiceImpl.java
에 다시 돌아와서 
private List<Sort> selectSortS(int camp_idx, String sort_name){
		HashMap<String, Object> query= new HashMap<String,Object>();
		query.put("camp_idx", camp_idx);
		query.put("sort_name", sort_name);

		return mapper.selectSort(query);
	}
return 부분 하는중이였으니 받아온 sort형 타입을 
campDetail메서드의 진행중이던 
list.add(selectSortS(camp_idx, sortNameList.get(i)));에 반환해줍니다
즉, list에 add 메서드로 받아온 sort(캠핑장별 분류된 값)을 추가.

메서드의 마지막으로 지금까지 받아온 모든 값들을 mv 객체에 속성, 값 형태로 저장
camp / allConvList / sortNameList / ImgDetailList / list 
하고 
1. CampDetailController.java의 진행중이던 campDetail메서드의 
mv = cdService.campDetail(Integer.parseInt(camp_idx)); 가 끝난것임
----------------------------------------------------------------------------------------------------------------
11. CampDetailController.java 컨트롤러 -(2) 리뷰로직은 간단하게만 설명.
( 1.안의 (1)번째 관련이 1~10번인데 그처럼 비슷하게 로직을따라이해할것)

(2) mv = cdService.selectReviewS(Integer.parseInt(camp_idx), false, session, mv, nextPage);
부분으로 인하여 
CampDetailServiceImpl.java의 public ModelAndView selectReviewS메서드가 실행된다.

그안의 로직들을 따라가며 SQL문들을 모두 해보면 해당메서드에서는 캠핑장에대한
리뷰개수 / 캠핑장리뷰띄우기 / 리뷰에대한 별점점수 / 별점으로 별모양 채우기 / 리뷰별점 평균들을 모두 구하여
reviewVO객체에 넣고 그것과 page수를 5로
 지정한 2가지 reviewVO와 page를 mv에 추가하여 반환. -> CampDetailController.java

12. CampDetailController.java 컨트롤러
(1) 과 (2) 를 통해 mv에 왠만한 값들을 다 품게 하였고
추가로 체크인 날짜 체크아웃날짜 인원수까지 설정하고 mv를 최종적으로 camp_detail.bam으로 반환한다.














