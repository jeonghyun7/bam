#상세페이지#(camp_detail.jsp) - 페이지 자체의 기능

1. camp_detail.jsp
<h2 class="breadcrumb__title">${camp.camp_name}</h2> 캠핑장이름
아래의 하트 찜 기능.
하트 비어있을때 - > onclick="fillHeart(this)" 이벤트
하트 차있을때 - > onclick="emptyHeart(this)" 이벤트 각각의 이벤트는 heart.js에 스크립트로 되어있음.

하트 비어있을때 버튼 눌렀을 때 -> heart.js (/heart/insert.bam?email='+email+'&camp_idx='+camp_idx
-> HeartController의 insert메서드 (heartService.selectOwnHeartS(email, camp_idx)*1==1) 
-> HeartServiceImple의 public int selectOwnHeartS(String email, int camp_idx)메서드
(try{
  Heart heart = mapper.selectOwnHeart(query);) 구문
-> HeartMapper.java 
-> HeartMapper.xml의
<!-- 해당회원의 캠핑장 찜수 검색 -->
	<select id="selectOwnHeart" parameterType="hashmap" resultType="Heart">
		select * from HEART where CAMP_IDX=#{camp_idx} and EMAIL=#{email}
	</select>
heart형태로 반환되는데 , 
HeartServiceImpl.java의 Heart heart = mapper.selectOwnHeart(query);로 돌아와
heart에 반환된 정보가 담기게 되고
해당캠핑장을 찜한 내역이 있으면 0반환 내역없으면 1반환이다.

-> HeartController.java에서 if(heartService.selectOwnHeartS(email, camp_idx)*1==1) {
(1) 위 구문에서 찜한내역있어서 0반환되었을 경우 0*1 == 1 과 다르기 때문에 else문 실행
else {
       try{
	httpServletResponse.getWriter().println(flag); -> flag 는 최초 선언한 0이 대입됨.
	httpServletResponse.flushBuffer();
구문이 실행.
(2) 위 구문에서 찜한내역없어서 1반환되었을 경우 1*1 == 1 과 같기 때문에 if 문이 실행
 flag = heartService.insertHeartS(email, camp_idx);
	try{
	   httpServletResponse.getWriter().println(flag); --> flag에 아래 로직들에 의해 1값담김.
	   httpServletResponse.flushBuffer();
구문이 실행된다. 
flag값을 구하기 위해 heartService.insertHeartS(email, camp_idx);

HeartServiceImpl.java의 public int insertHeartS(String email, int camp_idx) {메서드가 실행
그안의 try{
	mapper.insertHeart(query); 구문에 의해서 

HeartMapper.java들렀다가~ HeartMapper.xml로 이동 ~~

<!-- 캠핑장 찜하기 액션-->
	<insert id="insertHeart" parameterType="hashmap">
		<!-- insert into HEART values(HEART_SEQ.nextval, #{email}, #{camp_idx}) -->
		insert into HEART values(nextval(HEART_SEQ), #{email}, #{camp_idx})
	</insert>
해당SQL문 실행합니다.(nextval뜻은 HEART_SEQ 다음 값을 부여하여 insert하겠다는뜻)
하트시퀀스로 순서(?)및 번호를 매겨줌
실행후 HeartServiceImpl.java로 돌아와서 mapper.insertHeart문이 잘실행되었으면 1값을 반환 
-> HeartController.java에서 (2)구문의 flag 에는 1값이 담긴다.

하트 차있을때 버튼눌렀을때(onclick="emptyHeart(this)")
 heart.js (/heart/delete.bam?email='+email+'&camp_idx='+camp_idx
-> HeartController.java의 ("delete.bam")맵핑된 delete메서드
if(heartService.selectOwnHeartS(email, camp_idx)*1==1) { 구문실행하기위해 이동

-> HeartServiceImpl.java의
public int selectOwnHeartS(String email, int camp_idx) { 
mapper.selectOwnHeart(query); -> 해당구문실행위해 
-> HeartMapper.java 
-> HeartMapper.xml의
<!-- 해당회원의 캠핑장 찜수 검색 -->
	<select id="selectOwnHeart" parameterType="hashmap" resultType="Heart">
		select * from HEART where CAMP_IDX=#{camp_idx} and EMAIL=#{email}
	</select>
Heart형태로 반환(정보가 있기때문에)
-> HeartServiceImpl.java에서 
try{
    Heart heart = mapper.selectOwnHeart(query);
    if(heart==null) return 1;
     }catch(Exception e){
		return 0;
     }
     return 0;
};
0값이 반환 됨.
- > HeartController.java에서 delete메서드 이어서 실행 0*1==1이란 if조건문이 만족되지 않아서 
if(heartService.selectOwnHeartS(email, camp_idx)*1==1)
else문이 실행된다.
flag = heartService.deleteHeartS(email, camp_idx);
해당 구문실행하기 위해 
-> HeartServiceImpl.java로 다시 이동.
public int deleteHeartS(String email, int camp_idx) 
mapper.deleteHeart(query); 구문 실행하기 위해 이동
-> HeartMapper.java 
-> HeartMapper.xml의
<!-- 캠프장 찜하기 취소 액션-->
	<delete id="deleteHeart" parameterType="hashmap">
		delete from HEART where EMAIL=#{email} and CAMP_IDX=#{camp_idx}
	</delete>
구문 실행되어 해당email을 가진사람의 캠프idx가 heart테이블에서 삭제됨.

-> HeartServiceImpl.java로 돌아와서 
try{
    mapper.deleteHeart(query);
return 1; 
1값 반환.
-> HeartController.java로 돌아와서 
flag = heartService.deleteHeartS(email, camp_idx); flag에는 1이 담김.


