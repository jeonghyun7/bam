##########################################메인페이지(index.jsp)####################################
##############################################################################################

@@@@@@@@@@@@@@@@@@@@@@@0번. 배경동영상@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*동영상경로="video/main_viedo.mov
*비디오태그의 autoplay=true ->동영상 자동 실행
*muted ->음소거설정
*loop="true" -> 비디오 반복 재생

-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
@@@@@@@@@@@@@1번. search바의 (1)위치 칸 / (2)달력 칸 / (3)인원수 칸 / (4)search버튼@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

(1) 위치 (id=search)
위치 칸에 ex)태안을 입력하면 search.js의 첫 스크립트문이 실행되고
$(function(){
	$("#search").on("keyup", function(){
		document.getElementById('searched-place').value = document.getElementById('search').value;
	});
})

index.jsp의 아래 구문 id= "searched-place"의 value에 들어오게 된다.
<!-- request 할 데이터 -->
        <form id="searched-data" action="search/search.bam" method="get">
           <input type="hidden" id="searched-place" name="searchPlace" value="">
           <input type="hidden" id="check-in" class="check-in" name="checkIn" value="">
           <input type="hidden" id="check-out" class="check-out" name="checkOut" value="">
           <input type="hidden" id="peopleNum" name="peopleNum" value="1">
        </form>

----------------------------------------------------------------------------------------------------------------------

(2) 달력(예약날짜) 
  $$알고넘어가기$$-> 우리가 사용하는 DateRangePicker는 외국 개발자가 개발한 컴포넌트인 JS라이브러리이다.
우리가 메인페이지를 처음 로드하는순간 index.jsp의 가장 하단 스크립트문인 window.onload = function(){
으로 시작하는 스크립트문이 발동하여 기본으로 오늘날짜가 설정되어있습니다.

+날짜를 설정하기 위하여 달력칸을 click하면 daterangepicker.js안의 스크립트문들중 click관련 스크립트가 작동합니다.
+그이후 예약시작날짜와 예약끝날짜를 클릭하여 선택하면 jsp내의 하단의 스크립트문을 통하여
input[name="daterange] 에 값이 들어가며 해당 checkin/out날짜설정되고
아래 구문에서 id="check-in" id="check-out" 의 value값으로 설정됩니다.
<!-- request 할 데이터 -->
        <form id="searched-data" action="search/search.bam" method="get">
           <input type="hidden" id="searched-place" name="searchPlace" value="">
           <input type="hidden" id="check-in" class="check-in" name="checkIn" value="">
           <input type="hidden" id="check-out" class="check-out" name="checkOut" value="">
           <input type="hidden" id="peopleNum" name="peopleNum" value="1">
        </form>

--------------------------------------------------------------------------------------------------------------------
(3)인원수 (id="optionNo")
인원수 설정부분은 select/option태그를 사용하였고, select태그내의 onchange='selectPeopleNum();'이벤트란
우리가 작성한 selectPeopleNum(); 부분의 변화가 일어났는지 탐지하는 구문이며 해당 스크립트는
search.js의
/*검색창의 인원수 설정칸 */
function selectPeopleNum() {
	document.getElementById("peopleNum").value = document.getElementById("optionNo").value;
}
과 같습니다.
위 스크립트문을 통하여 아래의 id="peopleNum"의 value값이 변경됩니다.
<!-- request 할 데이터 -->
        <form id="searched-data" action="search/search.bam" method="get">
           <input type="hidden" id="searched-place" name="searchPlace" value="">
           <input type="hidden" id="check-in" class="check-in" name="checkIn" value="">
           <input type="hidden" id="check-out" class="check-out" name="checkOut" value="">
           <input type="hidden" id="peopleNum" name="peopleNum" value="1">
        </form>
 
--------------------------------------------------------------------------------------------------------------------
 (4)search 버튼  - (추후에 로직공부할 map.jsp와 백controller로 연결됨)
위치 / 달력 / 인원수 칸을 설정하고 검색버튼을 눌렀을 때 
+버튼태그의 onclick="submitSearch()" 이벤트가 발생합니다.
+search.js의 아래 스크립트 구문이 실행되고
/*검색창의 검색버튼 */
function submitSearch(){
	document.getElementById('searched-data').submit();
}
그에의해서 index.jsp의
<!-- request 할 데이터 -->
        <form id="searched-data" action="search/search.bam" method="get">
           <input type="hidden" id="searched-place" name="searchPlace" value="">
           <input type="hidden" id="check-in" class="check-in" name="checkIn" value="">
           <input type="hidden" id="check-out" class="check-out" name="checkOut" value="">
           <input type="hidden" id="peopleNum" name="peopleNum" value="1">
        </form>
해당 폼 id="searched-data"에 모두 저장되며 submit();이벤트로 폼이 get방식으로 search/search.bam값으로
전송됩니다.!!

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

@@@@@@@@@@@@@2번. 가장많이 예약한 캠핑장 슬라이더 부분@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

우리가 처음 메인페이지를 띄우기 위해 localhost:8080/로 호출하면 일단 "/"맵핑때문에
(1) IndexController.java 의 
리퀘스트 맵핑으로  "/"부분인 ModelAndView index(){가 실행된다.
ModelAndView mv = new ModelAndView("index");
구문을 통하여 ModelAndView객체를 생성함과 동시에 String값을 넣어 뷰이름을 설정해주고 mv변수값에 담는다.

List<CampAndEtc> camp = service.selectCampAndEtcS();을 통하여 BestCampServiceImpl.java로 이동
------------------------------------------------
(2)BestCampServiceImpl.java
public List<CampAndEtc> selectCampAndEtcS(){ 메서드의
List<CampAndEtc> mvpCampList = mapper.selectCampAndEtc(); 구문에의해 

CampMapper.java에 잠깐들렀다가 -> CampMapper.xml로 이동

(3)CampMapper.xml
안의 <select id="selectCampAndEtc" resultType="CampAndEtc"> SQL문이 실행됩니다.
해당 SQL문은 간단히 말해 CAMP테이블 / img테이블 / HEART테이블 / REVIEW테이블 함께 LEFT OUTERJOIN 되어있고
전체 예약량이 내림차순으로 되어있으며 보여질갯수가 최대 6개로 limit되어있으며 모든컬럼을 반환한다.
반환시에 타입은 CamAndEtc타입이며 타입의 모든 컬럼들은
CampAndEtc.java을 참조하면 됩니다.^^!

-> 다시 모든컬럼값을 가지고 로직반대로 되돌아가서 (2)BestCampServiceImpl.java

(4)BestCampServiceImpl.java에서 
List<CampAndEtc> mvpCampList = mapper.selectCampAndEtc(); 구문의
리스트형인 mvpCampList에 모든값을 담습니다. 바로 아래 if 문을 추가로 실행하여 
리스트에 담긴값이 null값이 아니면 즉 , 값이 들어있으면 StarUtil을 통해
별점모양에 평점값들을 넣어서 꽉찬별 / 빈별 / 반절찬 별을 만들어 CampAndEtc cae에 담아줌.

그리고 다시 mvcCampList 리스트 정보들을 담아서 IndexController.java로 이동

(5) IndexController.java로 돌아와서
List<CampAndEtc> camp = service.selectCampAndEtcS();
[가져온 mvpCampList]를 리스트형인 camp변수에 담아주고 
mv 모델 속성에 속성이름 bestCamp의 value로 camp를 추가한다. 그리고 메인페이지가 켜지게되기때문에

가장 많이 예약한 캠핑장 슬라이더 부분에 정보들이 출력되는 것!!!!!!!!!!!!!!!

(6) index.jsp의 가장 많이 예약한 캠핑장 슬라이더 부분에서 
<c:forEach var="unit" items="${bestCamp}"> 반복문이 돌면서  bestCamp에 담긴 리스트들이 한개씩 unit에 담겨
출력됩니다.

-------------------------------------------------------------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@3번. 최근게시물 Insta관련 @@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

jQuery는 Ajax와 관련된 다양하고 편리한 많은 메소드를 제공한다.
일단 insta.js의 제이쿼리 및 ajax를 살펴봐야한다.

(1) insta.js
$(document).ready(function(){  -> 'html문서의 로딩이 다 끝나면'(document라는 개체의 준비가 끝나면 함수를 실행한다.)

$.ajax({
	url: "insta/getGrid.json" 
에서 url은 요청 URL (클라이언트가 HTTP 요청을 보낼 서버의 주소) JSon형태로 요청.
이기 때문에 리퀘스트 맵핑 값인 /insta/*인 InstaController.java로 이동

(2) InstaController.java 
 js에서 요청한 url 에 의해 맵핑된 getGrid부분의 instaGrid메서드가 실행된다.
String jsonArray = instaService.getHttpHTML_GET(); 구문에 의해 InstaServiceImpl.java로 이동~

(3) InstaServiceImpl.java
에서 String getHttpHTML_GET() 메서드 실행~
아이디 값과 토큰 값이 담겨있는 url을 가진 URL 객체를 색성하여 object변수에 담아줌.

입력스트림을 가져와서 바이트배열을 차례대로 읽어들이고 return jsonArray;리턴해주며 (2)로 다시이동.

(4)InstaController.java로 다시돌아와서
리턴받은 값을 String 형 jsonArray에 저장하고 
response.setContentType("application/json; charset=utf-8")에 의해  Json형태로 응답받은것이 저장됨.

(5)insta.js
의 reponseData가 있으면 else문을 통하여 for문을 6번돌면서
for(i=0;i<6;i++){
	 $(".insta"+i).attr('src', responseData.data[i].media_url); -> //src이미지가 배정
	$(".instaLink"+i).attr('href', responseData.data[i].permalink); -> //href부분에 해당링크가 배정
	const time = responseData.data[i].timestamp.split("T");
	$(".instaTime"+i).html(time[0]);			->두 구문에의해 해당글 인스타업로드날짜배정
	 $(".instaContent"+i).html(responseData.data[i].caption); ->//인스타 글콘텐츠가 배정
의 각각 들어오는 값이 index.jsp에 각각 속성이 대입된다.

(6)index.jsp
<a href="blog-single.html" class="card-image-wrap instaLink0"> -> //href 부분에 해당링크가 들어감
                        <div class="card-image">
                            <img src="images/img31.jpg" alt="blog image" class="card__img insta0"> -> //src이미지가 들어감
                        </div><!-- end card-image -->
                    </a>
                    <div class="card-content pl-0 pr-0">
                        <ul class="card-meta pl-0 d-flex justify-content-between align-items-center mt-2">
                            <li class="instaTime0">04 Oct, 2022</li> ->//두 구문에의해 해당글 인스타업로드날짜들어감
                            <li></li>
                        </ul>
                        <p class="card-sub mt-3 instaContent0"> -> //인스타 글콘텐츠가 들어감
                            Sed ut perspiciatis unde omnis iste natus error sit
                            voluptatem eaque ipsa quae ab illo inventore
                            incididunt ut labore et dolore magna
                        </p>

----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@4번. 협력사 부분@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
협력사를 나타내주고 있는 슬라이드 부분에 대해서만 살펴볼 필요가 있다.
2번에서 가장많이 예약한 캠핑장에서 사용하는 슬라이드 기능과 일치한 부분인데
main.js를 살펴봐야하는데 2번부분은 .card-carousel부분을 통하여 owlCarousel 제이쿼리의 스크립트문이며

협력사부분은  $('.client-logo').owlCarousel({ 스크립트문을 보면된다.

#################알아두어야하는 간단한 내용 ######################################
우리프로젝트에서 사용되는 슬라이드 기능들은 모두 카로셀 플러그인을 사용하고 있다.
제이쿼리 기반이며 owl.carousel.min.js파일과 owl.carousel.css파일이 다운받아져있음을 알 수 있다.





























                    